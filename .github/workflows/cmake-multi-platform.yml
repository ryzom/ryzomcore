name: CMake on multiple platforms

on:
  push:
    branches: [ "core4", "feature/*" ]
    paths-ignore:
      - '.github/workflows/**.yml'
      - '!.github/workflows/cmake-multi-platform.yml'
  pull_request:
    branches: [ "core4" ]
    paths-ignore:
      - '.github/workflows/**.yml'
      - '!.github/workflows/cmake-multi-platform.yml'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        os: [ubuntu-22.04, ubuntu-20.04]
        build_type: [Release]
        build_preset: [release]
        c_compiler: [gcc]
        include:
          - os: ubuntu-22.04
            c_compiler: gcc
            cpp_compiler: g++
            ubuntu_version: 22.04
          - os: ubuntu-20.04
            c_compiler: gcc
            cpp_compiler: g++
            ubuntu_version: 20.04

    steps:
    - uses: actions/checkout@v4
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
    
    - name: Dependencies
      run: |
        sudo apt update
        sudo apt install --yes software-properties-common
        wget --quiet https://packages.microsoft.com/config/ubuntu/${{ matrix.ubuntu_version }}/packages-microsoft-prod.deb
        sudo dpkg --install packages-microsoft-prod.deb
        sudo apt update
        sudo apt install --yes \
        cmake build-essential ninja-build ccache \
          bison autoconf automake \
          libpng-dev \
          libjpeg-dev \
          libgif-dev libfreetype6-dev \
          freeglut3-dev \
          liblua5.2-dev libluabind-dev libcpptest-dev \
          libogg-dev libvorbis-dev libopenal-dev \
          libavcodec-dev libavformat-dev libavdevice-dev libswscale-dev libpostproc-dev \
          libmysqlclient-dev \
          libxml2-dev \
          libcurl4-openssl-dev libssl-dev \
          libsquish-dev \
          liblzma-dev \
          libgsf-1-dev \
          qtbase5-dev qttools5-dev qttools5-dev-tools \
          libmsquic
        wget https://raw.githubusercontent.com/microsoft/msquic/main/src/inc/msquic.h
        wget https://raw.githubusercontent.com/microsoft/msquic/main/src/inc/msquic_posix.h
        wget https://raw.githubusercontent.com/microsoft/msquic/main/src/inc/quic_sal_stub.h
        sudo mv msquic.h msquic_posix.h quic_sal_stub.h /usr/include/

    - name: Configure CMake
      run: >
        cmake --preset linux-default
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}

    - name: Build
      run: cmake --build --parallel $(nproc) --preset ${{ matrix.build_preset }}

    - uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-build
        path: build

    - name: Unit Tests
      run: ctest --preset default

    - uses: actions/upload-artifact@v4
      if: (success() || failure()) && matrix.os == 'ubuntu-22.04'
      with:
        name: test-results
        if-no-files-found: error
        path: ${{ steps.strings.outputs.build-output-dir }}/**/reports/*.xml

    - name: Package
      run: cpack --preset default

    - uses: actions/upload-artifact@v4
      with:
        name: package-${{ matrix.os }}
        path: ${{ steps.strings.outputs.build-output-dir }}/ryzomcore-*
