# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "core4", "feature/*" ]
  pull_request:
    branches: [ "core4" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: true

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        c_compiler: [gcc, clang-15]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang-15
            cpp_compiler: clang++-15

    steps:
    - uses: actions/checkout@v3
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
    
    - name: Dependencies
      run: >
        sudo apt update;
        sudo apt install --yes
        autoconf
        automake
        bison
        clang-15
        freeglut3-dev
        libavcodec-dev
        libavdevice-dev
        libavformat-dev
        libcpptest-dev
        libcurl4-openssl-dev
        libfreetype6-dev
        libgif-dev
        libgsf-1-dev
        libjpeg-dev
        liblua5.2-dev
        libluabind-dev
        liblzma-dev
        libmysqlclient-dev
        libogg-dev
        libopenal-dev
        libpng-dev
        libpostproc-dev
        libsquish-dev
        libssl-dev
        libswscale-dev
        libvorbis-dev
        libxml2-dev
        qtbase5-dev
        qttools5-dev
        qttools5-dev-tools

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        ${{ matrix.cmake_options }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DWITH_STATIC=ON
        -DWITH_NEL_TESTS=ON
        -DWITH_NEL_SAMPLES=ON
        -DWITH_LUA51=OFF
        -DWITH_LUA52=ON
        -DWITH_RYZOM=ON
        -DWITH_RYZOM_SERVER=ON
        -DWITH_RYZOM_CLIENT=ON
        -DWITH_RYZOM_TOOLS=ON
        -DWITH_NEL_TOOLS=ON
        -DWITH_NELNS=ON
        -DWITH_NELNS_LOGIN_SYSTEM=ON
        -DWITH_NELNS_SERVER=ON
        -DWITH_QT5=ON
        -DWITH_LIBGSF=ON
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
