trigger:
  branches:
    include:
      - core4
      - feature/*
      - main/atys-live

jobs:
  - job: ubuntu20
    timeoutInMinutes: 120
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - script: |
        sudo apt update
        sudo apt install --yes software-properties-common
        wget --quiet https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
        sudo dpkg --install packages-microsoft-prod.deb
        sudo apt update
        sudo apt install --yes \
          cmake build-essential ninja-build ccache \
          bison autoconf automake \
          libpng-dev \
          libjpeg-dev \
          libgif-dev libfreetype6-dev \
          freeglut3-dev \
          liblua5.2-dev libluabind-dev libcpptest-dev \
          libogg-dev libvorbis-dev libopenal-dev \
          libavcodec-dev libavformat-dev libavdevice-dev libswscale-dev libpostproc-dev \
          libmysqlclient-dev \
          libxml2-dev \
          libcurl4-openssl-dev libssl-dev \
          libsquish-dev \
          liblzma-dev \
          libgsf-1-dev \
          qtbase5-dev qttools5-dev qttools5-dev-tools \
          libmsquic
        wget https://raw.githubusercontent.com/microsoft/msquic/main/src/inc/msquic.h
        wget https://raw.githubusercontent.com/microsoft/msquic/main/src/inc/msquic_posix.h
        wget https://raw.githubusercontent.com/microsoft/msquic/main/src/inc/quic_sal_stub.h
        sudo mv msquic.h msquic_posix.h quic_sal_stub.h /usr/include/
      displayName: 'Dependencies'
    - script: >
        cmake --preset linux-default
        -DCMAKE_SUPPRESS_REGENERATION=ON
        -DWITH_MSQUIC=ON
      displayName: 'CMake'
    - script: |
        cat build/CMakeCache.txt
    - script: |
        cmake --build --preset release
      displayName: 'Make'
    - script: |
        ctest --preset default
      displayName: 'Unit Tests'

  - job: ubuntu22
    timeoutInMinutes: 120
    pool:
      vmImage: 'ubuntu-22.04'
    steps:
    - script: |
        sudo apt update
        sudo apt install --yes software-properties-common
        wget --quiet https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
        sudo dpkg --install packages-microsoft-prod.deb
        sudo apt update
        sudo apt install --yes \
          cmake build-essential ninja-build ccache \
            bison autoconf automake \
            libpng-dev \
            libjpeg-dev \
            libgif-dev libfreetype6-dev \
            freeglut3-dev \
            liblua5.2-dev libluabind-dev libcpptest-dev \
            libogg-dev libvorbis-dev libopenal-dev \
            libavcodec-dev libavformat-dev libavdevice-dev libswscale-dev libpostproc-dev \
            libmysqlclient-dev \
            libxml2-dev \
            libcurl4-openssl-dev libssl-dev \
            libsquish-dev \
            liblzma-dev \
            libgsf-1-dev \
            qtbase5-dev qttools5-dev qttools5-dev-tools \
            libmsquic
        wget https://raw.githubusercontent.com/microsoft/msquic/main/src/inc/msquic.h
        wget https://raw.githubusercontent.com/microsoft/msquic/main/src/inc/msquic_posix.h
        wget https://raw.githubusercontent.com/microsoft/msquic/main/src/inc/quic_sal_stub.h
        sudo mv msquic.h msquic_posix.h quic_sal_stub.h /usr/include/
      displayName: 'Dependencies'
    - script: >
        cmake --preset linux-default
        -DCMAKE_SUPPRESS_REGENERATION=ON
        -DWITH_MSQUIC=ON
      displayName: 'CMake'
    - script: |
        cat build/CMakeCache.txt
    - script: |
        cmake --build --preset release
      displayName: 'Make'
    - script: |
        ctest --preset default
      displayName: 'Unit Tests'

  - job: client
    strategy:
      matrix:
        ubuntu:
          vmImage: 'ubuntu-20.04'
          releaseName: 'Ubuntu20'
          aptPackages: >-
            libasound2-dev
            libgl1-mesa-dev
            libjack-dev
            libpulse-dev
            libxrandr-dev
            libxrender-dev
            libxxf86vm-dev
            libmsquic
          cmakeExtra: >-
            -DCMAKE_INSTALL_LIBDIR=lib
        win2019:
          vmImage: 'windows-2019'
          releaseName: 'Win64'
          cmakeExtra: >-
            -DWITH_DRIVER_DIRECT3D=ON
            -DWITH_DRIVER_XAUDIO2=ON
            -DDXSDK_DIR=C:/DXSDK
        macOS12:
          vmImage: 'macOS-12'
          releaseName: 'macOS'
          MACOSX_DEPLOYMENT_TARGET: 10.12
          cmakeExtra: >-
            -DWITH_LIBXML2_ICONV=OFF
            -DHUNTER_USE_CACHE_SERVERS=NO
            -GXcode
    timeoutInMinutes: 120
    pool:
      vmImage: $(vmImage)
    steps:
    - checkout: self
      fetchDepth: 0
    - script: |
        wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt update
        sudo apt remove -y man-db
        sudo apt install -y --no-install-recommends $(aptPackages)
        wget https://raw.githubusercontent.com/microsoft/msquic/main/src/inc/msquic.h
        wget https://raw.githubusercontent.com/microsoft/msquic/main/src/inc/msquic_posix.h
        wget https://raw.githubusercontent.com/microsoft/msquic/main/src/inc/quic_sal_stub.h
        sudo mv msquic.h /usr/include/msquic.h
        sudo mv msquic_posix.h /usr/include/msquic_posix.h
        sudo mv quic_sal_stub.h /usr/include/quic_sal_stub.h
        wget --output-document=/tmp/cmake.sh https://github.com/Kitware/CMake/releases/download/v3.27.9/cmake-3.27.9-linux-x86_64.sh
        sudo mkdir /opt/cmake
        sudo sh /tmp/cmake.sh --skip-license --prefix=/opt/cmake
        sudo ln --symbolic --force /opt/cmake/bin/cmake /usr/local/bin/cmake
      displayName: '(ubuntu) Dependencies'
      condition: eq(variables['Agent.JobName'], 'client ubuntu')
    - task: Cache@2
      inputs:
        key: 'dxsdk'
        path: 'C:/DXSDK'
      condition: contains(variables['cmakeExtra'], 'DIRECT3D=ON')
      displayName: '(windows) DirectX SDK Cache'
    - task: CmdLine@2
      inputs:
        script: |
          IF NOT EXIST C:\DXSDK (
            aria2c https://download.microsoft.com/download/A/E/7/AE743F1F-632B-4809-87A9-AA1BB3458E31/DXSDK_Jun10.exe
            7z x DXSDK_Jun10.exe -oC:\ -r -y
            del DXSDK_Jun10.exe
          )
      displayName: '(windows) DirectX SDK'
      condition: contains(variables['cmakeExtra'], 'DIRECT3D=ON')
    - task: Cache@2
      inputs:
        key: 'hunter | $(releaseName) | "$(Agent.OS)"'
        path: '$(Pipeline.Workspace)/.hunter/_Base/Cache'
      displayName: 'Hunter Cache'
    - task: CMake@1
      displayName: 'Configure'
      inputs:
        workingDirectory: $(Build.BinariesDirectory)
        cmakeArgs: >-
          $(cmakeExtra)
          -DCMAKE_CONFIGURATION_TYPES=Release
          -DFINAL_VERSION=OFF
          -DHUNTER_CONFIGURATION_TYPES=Release
          -DHUNTER_ENABLED=ON
          -DHUNTER_ROOT=$(Pipeline.Workspace)/.hunter
          -DWITH_DRIVER_OPENAL=ON
          -DWITH_DRIVER_OPENGL=ON
          -DWITH_INSTALL_LIBRARIES=OFF
          -DWITH_NEL_SAMPLES=OFF
          -DWITH_NEL_TESTS=OFF
          -DWITH_NEL_TOOLS=OFF
          -DWITH_RYZOM_CLIENT=ON
          -DWITH_RYZOM_SERVER=OFF
          -DWITH_RYZOM_TOOLS=OFF
          $(Build.SourcesDirectory)
    - task: CMake@1
      displayName: 'Build'
      inputs:
        workingDirectory: $(Build.BinariesDirectory)
        cmakeArgs: '--build . --config Release'
    #- task: CMake@1
    #  displayName: 'Install'
    #  inputs:
    #    workingDirectory: $(Build.BinariesDirectory)
    #    cmakeArgs: --install . --config Release --prefix $(Build.StagingDirectory)
    #- task: PublishPipelineArtifact@1
    #  inputs:
    #    targetPath: $(Build.StagingDirectory)/bin
    #    artifactName: RyzomClient$(releaseName)Release
