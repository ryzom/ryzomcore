#########################################################################
# AI script compiler configuration file
# -------------------------------------
# Syntax:
# Each line has the following form:
#       <type>: <name>=<content>
#   type is either token or rule
#   name is any name without '=' character
#   content for token is a regular expression
#   content for rule has the following form:
#       <matching_rule>,<byte_code>
#     matching_rule is a combination of rules and/or tokens seperated with spaces
#     byte_code is a set of bytecode mnemonics seperated with commas (',')
# Lines beginning with # and empty lines are skipped.
# /!\ - lines exceeding 255 characters will be misinterpreted
# /!\ - following tokens and rules are used by the system, so don't change
#       their names:
#         NAME, params, tuple, expeclose, case
#       There may be others. This can be considered as a bug.

#########################################################################
# Language Tokens

# program end
token: PE=\!\!

token: NUMBER=(\-)?[0-9]+(\.[0-9]+)?

token: IF=\i\f
token: ELSE=\e\l\s\e
token: FOR=\f\o\r
token: WHILE=\w\h\i\l\e
token: RAND=\r\a\n\d

token: SWITCH=\s\w\i\t\c\h
token: CASE=\c\a\s\e

token: ONCHILDREN=\o\n\c\h\i\l\d\r\e\n

token: PRINT=\p\r\i\n\t
token: LOG=\l\o\g

#token: CHAIN=\"[-a-zA-Z0-9_ .,]*\"
token: CHAIN=\"[-a-zA-Z0-9_ .:,;()*/+='!?ÈË˘Í‡Á#&|%<>]*\"

token: NAME=[a-zA-Z_][a-zA-Z0-9_]*
token: STRNAME=\$[a-zA-Z_][a-zA-Z0-9_]*

token: AND=\&\&
token: OR=\|\|

token: EQU=\=\=
token: SUPEQ=(\>\=)|(\=\>)
token: INFEQ=(\<\=)|(\=\<)
token: NEQ=(\!\=)|(\<\>)|(\>\<)
token: SUP=\>
token: INF=\<

token: ADDASSIGN=\+\=
token: SUBASSIGN=\-\=
token: MULASSIGN=\*\=
token: DIVASSIGN=\/\=

token: PLUSPLUS=\+\+
token: MINUSMINUS=\-\-

token: PLUS=\+
token: MINUS=\-
token: SLASH=\/
token: STAR=\*

token: POINT=\.
token: SEPARATOR=\,
token: ASSIGNATOR=\=
token: PV=\;
token: PP=\:
token: LP=\(
token: RP=\)
token: LA=\{
token: RA=\}

#########################################################################
# Language Grammar

rule: logic=AND, AND|OR, OR

rule: comp=EQU, EQ|SUPEQ, SUPEQ|INFEQ, INFEQ|NEQ, NEQ|SUP, SUP|INF, INF

rule: expression=expression logic expression, Code 1, Code 3, Code 2
rule: expression=LP expression RP, Code 2
rule: expression=value comp value, Code 1, Code 3, Code 2

#not used rule: stringType=CHAIN, Code 1|STRNAME, String 1
#not used rule: expression=stringType comp stringType, Code 1, Code 3, Code 2

rule: value=somme, Code 1|produitoufacteur, Code 1|expprio, Code 1

rule: oper1=PLUS, ADD|MINUS, SUB

rule: somme=somme oper1 produitoufacteur, Code 1, Code 3, Code 2
rule: somme=produitoufacteur oper1 produitoufacteur, Code 1, Code 3, Code 2

rule: oper2=SLASH, DIV|STAR, MUL

rule: produit=produitoufacteur oper2 facteur, Code 1, Code 3, Code 2
rule: produitoufacteur=produit, Code 1|facteur, Code 1

rule: facteur=expprio, Code 1
rule: facteur=expressMemb, Code 1

rule: expprio=LP somme RP, Code 2|LP produit RP, Code 2|LP expressMemb RP, Code 2
rule: expressMemb=readVar, Code 1
#rule: expressMemb=readVar, Code 1|exp, Code 1

rule: if=IF LP expression RP lineOrClose, Code 3, JE 3, Code 5
rule: ifelse=IF LP expression RP lineOrClose ELSE lineOrClose, Code 3, JE 4, Code 5, JUMP 5, Code 7
# Special case.
rule: while=WHILE LP expression RP lineOrClose, Code 3, JE 4, Code 5, JUMP 0

rule: groupRef=NAME POINT, PUSH_GROUP, String 1

rule: setFunction=NAME LP RP expeclose, FUNCTION, String 1, JUMP 5, Code 4, EOP
rule: setFunction=NAME LP RP LA RA, FUNCTION, String 1, JUMP 4, EOP
rule: callOn=NAME LP RP, CALL, String 1

rule: function=setFunction, PUSH_THIS, Code 1|groupRef setFunction, Code 1, Code 2
rule: call=callOn, PUSH_THIS, Code 1|groupRef callOn, Code 1, Code 2


rule: nativeFunc=tuple NAME params, Code 3, PUSH_THIS, NativeCall, Code 1
rule: nativeOtherFunc=tuple groupRef NAME params, Code 4, Code 2, NativeCall, Code 1

# used to make this: foo1()=toto.foo2(); toto.foo1()=foo2(); toto.foo1()=tutu.foo2(); or foo1()=foo2();
rule: setFromFuncGet=NAME LP RP, PUSH_THIS, PUSH_STRING, String 1|groupRef NAME LP RP, Code 1, PUSH_STRING, String 2
rule: setFromFuncSet=NAME LP RP, PUSH_THIS, PUSH_STRING, String 1|groupRef NAME LP RP, Code 1, PUSH_STRING, String 2
rule: setFromFunction=setFromFuncSet ASSIGNATOR setFromFuncGet, Code 1, Code 3, ASSIGN_FUNC_FROM

# first Name -> Group, second Name -> EventName

rule: tupleElem=tupleElem SEPARATOR writeVar, Code 1, Code 3|writeVar, Code 1
rule: tuple=LP tupleElem RP, Code 2|LP RP

rule: lValue=writeVar, Code 1|tuple, Code 1
rule: rValue=readVar, Code 1|somme, Code 1|produit, Code 1|expprio, Code 1
#rule: rValue=readVar, Code 1|exp, Code 1|somme, Code 1|produit, Code 1|expprio, Code 1

rule: readConstVar=CHAIN, PUSH_STRING, String 1
rule: readConstVar=NUMBER, PUSH_ON_STACK, Atof 1

rule: readVar=NAME, PUSHVAR_VAL, String 1|NAME POINT NAME, PUSHOTHERVAR_VAL, String 1, String 3
rule: readVar=STRNAME, PUSHSTRVAR_VAL, String 1|NAME POINT STRNAME, PUSHOTHERSTRVAR_VAL, String 1, String 3
rule: readVar=readConstVar, Code 1

rule: writeVar=NAME, SETVAR_VAL, String 1|NAME POINT NAME, SETOTHERVAR_VAL, String 1, String 3
rule: writeVar=STRNAME, SETSTRVAR_VAL, String 1|NAME POINT STRNAME, SETOTHERSTRVAR_VAL, String 1, String 3


rule: rValueList=rValueList SEPARATOR rValue, Code 1, Code 3|rValue, Code 1
rule: params=LP rValueList RP, Code 2|LP RP

#rule: exp=lValue ASSIGNATOR rValue, Code 3, Code 1|functCall, Code 1
rule: exp=lValue ASSIGNATOR rValue, Code 3, Code 1

rule: printContent=printContent SEPARATOR CHAIN, Code 1, PUSH_PRINT_STRING, String 3|CHAIN, PUSH_PRINT_STRING, String 1
rule: printContent=printContent SEPARATOR NAME, Code 1, PUSH_PRINT_VAR, String 3|NAME, PUSH_PRINT_VAR, String 1
rule: printContent=printContent SEPARATOR STRNAME, Code 1, PUSH_PRINT_STRVAR, String 3|STRNAME, PUSH_PRINT_STRVAR, String 1
rule: printString=PRINT LP printContent RP, Code 3, PRINT_STRING
rule: logString=LOG LP printContent RP, Code 3, LOG_STRING


rule: line=ifelse, Code 1
rule: line=if, Code 1
rule: line=exp PV, Code 1
rule: line=while, Code 1
rule: line=printString PV, Code 1
rule: line=logString PV, Code 1
rule: line=function, Code 1|call PV, Code 1
rule: line=setFromFunction PV, Code 1
rule: line=nativeFunc PV, Code 1
rule: line=nativeOtherFunc PV, Code 1
rule: line=randEx, Code 1
rule: line=onChildren, Code 1
rule: line=switch, Code 1

# Incr and decr
rule: line=NAME PLUSPLUS PV, PUSHVAR_VAL, String 1, INCR, SETVAR_VAL, String 1
rule: line=PLUSPLUS NAME PV, PUSHVAR_VAL, String 2, INCR, SETVAR_VAL, String 2
rule: line=NAME MINUSMINUS PV, PUSHVAR_VAL, String 1, DECR, SETVAR_VAL, String 1
rule: line=MINUSMINUS NAME PV, PUSHVAR_VAL, String 2, DECR, SETVAR_VAL, String 2
rule: line=NAME POINT NAME PLUSPLUS PV, PUSHOTHERVAR_VAL, String 1, String 3, INCR, SETOTHERVAR_VAL, String 1, String 3
rule: line=PLUSPLUS NAME POINT NAME PV, PUSHOTHERVAR_VAL, String 2, String 4, INCR, SETOTHERVAR_VAL, String 2, String 4
rule: line=NAME POINT NAME MINUSMINUS PV, PUSHOTHERVAR_VAL, String 1, String 3, DECR, SETOTHERVAR_VAL, String 1, String 3
rule: line=MINUSMINUS NAME POINT NAME PV, PUSHOTHERVAR_VAL, String 2, String 4, DECR, SETOTHERVAR_VAL, String 2, String 4

# float += float
rule: line=NAME ADDASSIGN rValue PV, PUSHVAR_VAL, String 1, Code 3, ADD, SETVAR_VAL, String 1
rule: line=NAME POINT NAME ADDASSIGN rValue PV, PUSHOTHERVAR_VAL, String 1, String 3, Code 5, ADD, SETOTHERVAR_VAL, String 1, String 3
# float -= float
rule: line=NAME SUBASSIGN rValue PV, PUSHVAR_VAL, String 1, Code 3, SUB, SETVAR_VAL, String 1
rule: line=NAME POINT NAME SUBASSIGN rValue PV, PUSHOTHERVAR_VAL, String 1, String 3, Code 5, SUB, SETOTHERVAR_VAL, String 1, String 3
# float *= float
rule: line=NAME MULASSIGN rValue PV, PUSHVAR_VAL, String 1, Code 3, MUL, SETVAR_VAL, String 1
rule: line=NAME POINT NAME MULASSIGN rValue PV, PUSHOTHERVAR_VAL, String 1, String 3, Code 5, MUL, SETOTHERVAR_VAL, String 1, String 3
# float /= float
rule: line=NAME DIVASSIGN rValue PV, PUSHVAR_VAL, String 1, Code 3, DIV, SETVAR_VAL, String 1
rule: line=NAME POINT NAME DIVASSIGN rValue PV, PUSHOTHERVAR_VAL, String 1, String 3, Code 5, DIV, SETOTHERVAR_VAL, String 1, String 3

# when CONCAT is supported add string +=
# string += string
#rule: line=STRNAME ADDASSIGN rValue PV, PUSHSTRVAR_VAL, String 1, Code 3, CONCAT, SETSTRVAR_VAL, String 1
#rule: line=NAME POINT STRNAME ADDASSIGN rValue PV, PUSHOTHERSTRVAR_VAL, String 1, String 3, Code 5, CONCAT, SETOTHERSTRVAR_VAL, String 1, String 3

rule: lineOrClose=line, Code 1|expeclose, Code 1

rule: randEx=RAND expeclose, RandomSeq

rule: case=CASE readConstVar PP lineOrClose
rule: switch=SWITCH LP rValue RP LA +case RA, Code 3,SwitchSeq

rule: expeclose=LA +lineOrClose RA, CodeAllExceptFirstAndLast

rule: onChildren=ONCHILDREN LP RP expeclose, ONCHILDREN, JUMP 4, Code 4, EOP

