// Use with commandline: ryzom_admin_service -A. -C. -L. --nobreak --fulladminname=admin_executor_service --shortadminname=AES

#include "admin_executor_service_default.cfg"

// ---- config local variables

// Address of the admin service (default port is 49996)
ASHost = "localhost";
ASPort="46701";

// ---- service NeL variables (used by ConfigFile class)

AESAliasName= "aes";

StartCommands=
{
	// Create a gateway module
	"moduleManager.createModule StandardGateway gw",
	// add a layer 5 transport
	"gw.transportAdd L5Transport l5",
	// open the transport
	"gw.transportCmd l5(open)",

	/// Create default connection with admin executor service
	// Create a gateway module
	"moduleManager.createModule StandardGateway gw_aes",
	// create the admin executor service module
	"moduleManager.createModule AdminExecutorServiceClient aes_client",
	"aes_client.plug gw_aes",

	// create a layer 3 client to connect to aes gateway
	"gw_aes.transportAdd L3Client aes_l3c",
	"gw_aes.transportCmd aes_l3c(connect addr="+AESHost+":"+AESPort+")",

	// create the admin executor service module
	"moduleManager.createModule AdminExecutorService aes",

	// create a gateway to connect to as
	"moduleManager.createModule StandardGateway asc_gw",
	// create a layer 3 client
	"asc_gw.transportAdd L3Client l3c",
	"asc_gw.transportCmd l3c(connect addr="+ASHost+":"+ASPort+")",

	// create a gateway for services to connect
	"moduleManager.createModule StandardGateway aes_gw",
	// create a layer 3 server
	"aes_gw.transportAdd L3Server l3s",
	"aes_gw.transportOptions l3s(PeerInvisible)",
	"aes_gw.transportCmd l3s(open port="+AESPort+")",

	// plug the as
	"aes.plug asc_gw",
	"aes.plug aes_gw",
};

StartCommands +=
{
	"aes.addRegisteredService bms_master #SHARDNAME#",
//	"aes.addRegisteredService bms_pd_master #SHARDNAME#",
	"aes.addRegisteredService egs #SHARDNAME#",
	"aes.addRegisteredService gpms #SHARDNAME#",
	"aes.addRegisteredService ios #SHARDNAME#",
	"aes.addRegisteredService rns #SHARDNAME#",
	"aes.addRegisteredService rws #SHARDNAME#",
	"aes.addRegisteredService ts #SHARDNAME#",
	"aes.addRegisteredService ms #SHARDNAME#",
	"aes.addRegisteredService ais_newbieland #SHARDNAME#",
	"aes.addRegisteredService ais_fyros #SHARDNAME#",
	"aes.addRegisteredService ais_roots #SHARDNAME#",
	"aes.addRegisteredService ais_matis #SHARDNAME#",
	"aes.addRegisteredService ais_tryker #SHARDNAME#",
	"aes.addRegisteredService ais_zorai #SHARDNAME#",
	"aes.addRegisteredService ais_ark #SHARDNAME#",
	"aes.addRegisteredService mfs #SHARDNAME#",
	"aes.addRegisteredService su #SHARDNAME#",
	"aes.addRegisteredService fes #SHARDNAME#",
	"aes.addRegisteredService sbs #SHARDNAME#",
	"aes.addRegisteredService lgs #SHARDNAME#",
//	"aes.addRegisteredService mos #SHARDNAME#",
//	"aes.addRegisteredService pdss #SHARDNAME#",
	"aes.addRegisteredService ras #SHARDNAME#",
	"aes.addRegisteredService aes #SHARDNAME#",
};


bms_master = { "./", "/home/nevrax/dev/live/service_backup_service/backup_service", "-C. -L. --nobreak --writepid -P49990" };
bms_pd_master = { "./", "/home/nevrax/dev/live/service_backup_service/backup_service", "-C. -L. --nobreak --writepid -P49992" };
egs = { "./", "/home/nevrax/dev/live/service_entities_game_service/entities_game_service", "-C. -L. --nobreak --writepid" };
gpms = { "/home/nevrax/dev/gpms", "/home/nevrax/dev/live/service_gpm_service/gpm_service", "-C. -L. --nobreak --writepid" };
ios = { "/home/nevrax/dev/ios", "/home/nevrax/dev/live/service_input_output_service/input_output_service", "-C. -L. --nobreak --writepid" };
rns = { "/home/nevrax/dev/rns", "/home/nevrax/dev/live/service_ryzom_naming_service/ryzom_naming_service", "-C. -L. --nobreak --writepid" };
rws = { "/home/nevrax/dev/rws", "/home/nevrax/dev/live/service_ryzom_welcome_service/ryzom_welcome_service", "-C. -L. --nobreak --writepid" };
ts = { "/home/nevrax/dev/ts", "/home/nevrax/dev/live/service_tick_service/tick_service", "-C. -L. --nobreak --writepid" };
ms = { "/home/nevrax/dev/ms", "/home/nevrax/dev/live/service_mirror_service/mirror_service", "-C. -L. --nobreak --writepid" };
ais_newbieland = { "/home/nevrax/dev/ais_newbyland", "/home/nevrax/dev/live/service_ai_service/ai_service", "-C. -L. --nobreak --writepid -mCommon:Newbieland:Post" };
ais_fyros = { "/home/nevrax/dev/ais_newbyland", "/home/nevrax/dev/live/service_ai_service/ai_service", "-C. -L. --nobreak --writepid -mCommon:Newbieland:Post" };
ais_roots = { "/home/nevrax/dev/ais_newbyland", "/home/nevrax/dev/live/service_ai_service/ai_service", "-C. -L. --nobreak --writepid -mCommon:Newbieland:Post" };
ais_matis = { "/home/nevrax/dev/ais_newbyland", "/home/nevrax/dev/live/service_ai_service/ai_service", "-C. -L. --nobreak --writepid -mCommon:Newbieland:Post" };
ais_tryker = { "/home/nevrax/dev/ais_newbyland", "/home/nevrax/dev/live/service_ai_service/ai_service", "-C. -L. --nobreak --writepid -mCommon:Newbieland:Post" };
ais_zorai = { "/home/nevrax/dev/ais_newbyland", "/home/nevrax/dev/live/service_ai_service/ai_service", "-C. -L. --nobreak --writepid -mCommon:Newbieland:Post" };
ais_ark = { "/home/nevrax/dev/ais_newbyland", "/home/nevrax/dev/live/service_ai_service/ai_service", "-C. -L. --nobreak --writepid -mCommon:Newbieland:Post" };
mfs = { "/home/nevrax/dev/mfs", "/home/nevrax/dev/live/service_mail_forum_service/mail_forum_service", "-C. -L. --nobreak --writepid" };
su = { "/home/nevrax/dev/su", "/home/nevrax/dev/live/service_shard_unifier_service/shard_unifier_service", "-C. -L. --nobreak --writepid" };
fes = { "/home/nevrax/dev/fes", "/home/nevrax/dev/live/service_frontend_service/frontend_service", "-C. -L. --nobreak --writepid" };
sbs = { "/home/nevrax/dev/sbs", "/home/nevrax/dev/live/service_session_browser_server/session_browser_server", "-C. -L. --nobreak --writepid" };
lgs = { "/home/nevrax/dev/lgs", "/home/nevrax/dev/live/service_logger_service/logger_service", "-C. -L. --nobreak --writepid" };
mos = { "/home/nevrax/dev/mos", "/home/nevrax/dev/live/service_monitor_service/monitor_service", "-C. -L. --nobreak --writepid" };
pdss = { "/home/nevrax/dev/pdss", "/home/nevrax/dev/live/service_pd_support_service/pd_support_service", "-C. -L. --nobreak --writepid" };
ras = { "./", "src/ryzom_admin_service/ryzom_admin_service", "--fulladminname=admin_service --shortadminname=AS -C. -L. --nobreak --writepid" };

RegisteredServices=
{
	"bms_master",
	"bms_pd_master",
	"egs",
	"gpms",
	"ios",
	"rns",
	"rws",
	"ts",
	"ms",
	"ais_newbieland",
	"ais_fyros",
	"ais_roots",
	"ais_matis",
	"ais_tryker",
	"ais_zorai",
	"ais_ark",
	"mfs",
	"su",
	"fes",
	"sbs",
	"lgs",
	"mos",
	"pdss",
	"ras",
};

//
DontUseStdIn = 0;

// ---- service NeL variables (used by CVariable class)

// If the update loop is too slow, a thread will produce an assertion.
// By default, the value is set to 10 minutes.
// Set to 0 for no assertion.
UpdateAssertionThreadTimeout = 0;

// ---- service custom variables (used by ConfigFile class)

// ---- service custom variables (used by CVariable class)

// in second, -1 for not restarting
RestartDelay = 60;

// how many second before aborting the request if not finished
RequestTimeout = 5;

// log path for advanced log report
LogPath = "/.";

// setup for deployment environment with exeternal configuration system responsible for launching apps and
// for configuring AES services
DontLaunchServicesDirectly = 1;
UseExplicitAESRegistration = 1;
KillServicesOnDisconnect = 1;

ShardName="#SHARDNAME#";
