SET(LIBRARY_NAME_RELEASE)
SET(LIBRARY_NAME_DEBUG)

IF(WITH_LUA53)
  LIST(APPEND LIBRARY_NAME_RELEASE luabind_lua53)
  LIST(APPEND LIBRARY_NAME_DEBUG luabind_lua53d)
ENDIF()

IF(WITH_LUA52)
  LIST(APPEND LIBRARY_NAME_RELEASE luabind_lua52)
  LIST(APPEND LIBRARY_NAME_DEBUG luabind_lua52d)
ENDIF()

IF(WITH_LUA51)
  LIST(APPEND LIBRARY_NAME_RELEASE luabind_lua51)
  LIST(APPEND LIBRARY_NAME_DEBUG luabind_lua51d)
ENDIF()

IF(WITH_LUA50)
  LIST(APPEND LIBRARY_NAME_RELEASE luabind_lua50)
  LIST(APPEND LIBRARY_NAME_DEBUG luabind_lua50d)
ENDIF()

# generic libraries names
LIST(APPEND LIBRARY_NAME_DEBUG luabind_d libluabind_d)

FIND_PACKAGE_HELPER(Luabind luabind/luabind.hpp RELEASE ${LIBRARY_NAME_RELEASE} DEBUG ${LIBRARY_NAME_DEBUG})

MACRO(FIND_CORRECT_LUA_VERSION)
  # Check Lua version linked to Luabind under Linux
  IF(LUABIND_LIBRARY_RELEASE MATCHES "\\.so")
    INCLUDE(CheckDepends)

    SET(LUA52_LIBRARY "liblua5.2")
    CHECK_LINKED_LIBRARY(LUABIND_LIBRARY_RELEASE LUA52_LIBRARY LUALIB_FOUND)
    
    IF(NOT LUALIB_FOUND)
      # fedora (v20)
      SET(LUA52_LIBRARY "liblua-5.2")
      CHECK_LINKED_LIBRARY(LUABIND_LIBRARY_RELEASE LUA52_LIBRARY LUALIB_FOUND)
    ENDIF(NOT LUALIB_FOUND)

    IF(LUALIB_FOUND)
      MESSAGE(STATUS "Luabind is using Lua 5.2")
      FIND_PACKAGE(Lua52 REQUIRED)
    ELSE(LUALIB_FOUND)
      SET(LUA51_LIBRARY "liblua5.1")
      CHECK_LINKED_LIBRARY(LUABIND_LIBRARY_RELEASE LUA51_LIBRARY LUALIB_FOUND)

      IF(LUALIB_FOUND)
        MESSAGE(STATUS "Luabind is using Lua 5.1")
        FIND_PACKAGE(Lua51 REQUIRED)
      ELSE(LUALIB_FOUND)
        SET(LUA50_LIBRARY "liblua5.0")
        CHECK_LINKED_LIBRARY(LUABIND_LIBRARY_RELEASE LUA50_LIBRARY LUALIB_FOUND)

        IF(LUALIB_FOUND)
          MESSAGE(STATUS "Luabind is using Lua 5.0")
          FIND_PACKAGE(Lua50 REQUIRED)
        ELSE(LUALIB_FOUND)
          MESSAGE(FATAL_ERROR "Can't determine Lua version used by Luabind")
        ENDIF(LUALIB_FOUND)
      ENDIF(LUALIB_FOUND)
    ENDIF(LUALIB_FOUND)
  ELSE(LUABIND_LIBRARY_RELEASE MATCHES "\\.so")
    # TODO: find a way to detect Lua version
    IF(WITH_LUA52)
      FIND_PACKAGE(Lua52 REQUIRED)
    ELSEIF(WITH_LUA51)
      FIND_PACKAGE(Lua51 REQUIRED)
    ELSE(WITH_LUA52)
      FIND_PACKAGE(Lua50 REQUIRED)
    ENDIF(WITH_LUA52)
  ENDIF(LUABIND_LIBRARY_RELEASE MATCHES "\\.so")
ENDMACRO(FIND_CORRECT_LUA_VERSION)

IF(LUABIND_FOUND)
  FIND_PACKAGE(MyBoost REQUIRED)

  SET(LUABIND_INCLUDE_DIR ${LUABIND_INCLUDE_DIR} ${BOOST_INCLUDE_DIR})
  # Check if luabind/version.hpp exists
  FIND_FILE(LUABIND_VERSION_FILE luabind/version.hpp PATHS ${LUABIND_INCLUDE_DIR})
  IF(LUABIND_VERSION_FILE)
    SET(LUABIND_DEFINITIONS "-DHAVE_LUABIND_VERSION")
  ENDIF(LUABIND_VERSION_FILE)

  FIND_CORRECT_LUA_VERSION()

  SET(LUABIND_INCLUDE_DIRS ${LUABIND_INCLUDE_DIRS} ${LUA_INCLUDE_DIR})
  SET(LUABIND_LIBRARIES ${LUABIND_LIBRARIES} ${LUA_LIBRARIES})
ENDIF(LUABIND_FOUND)
